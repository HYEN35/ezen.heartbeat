/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.95
 * Generated at: 2024-11-25 08:25:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.heartbeat;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.HttpSession;

public final class playlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("jar:file:/C:/Users/kim/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/include/layout.jsp", Long.valueOf(1732522992956L));
    _jspx_dependants.put("/WEB-INF/views/include/menu.jsp", Long.valueOf(1732522992956L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1729867057530L));
    _jspx_dependants.put("jar:file:/C:/Users/kim/.m2/repository/javax/servlet/jstl/1.2/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");

    String pageName = (String) request.getAttribute("pageName");
    String pageTitle = (String) request.getAttribute("pageTitle");
	String pageRequest = request.getRequestURI();

	if (pageRequest.endsWith("index.jsp")) pageName = "HeartBeat";
	else if (pageRequest.endsWith("Web/login.jsp")) pageName = "로그인 - HeartBeat";
	else if (pageRequest.endsWith("join.jsp")) pageName = "회원가입 - HeartBeat";
	
	else if (pageRequest.endsWith("chart.jsp")){
		pageName = "차트 - HeartBeat";
		pageTitle = "차트";
	}
	else if (pageRequest.endsWith("playlist.jsp")) {
		pageName = "플레이리스트 - HeartBeat";
		pageTitle = "플레이리스트";
	}
	else if (pageRequest.endsWith("community.jsp")) {
		pageName = "커뮤니티 - HeartBeat";
		pageTitle = "커뮤니티";
	}
	else if (pageRequest.endsWith("membership.jsp")) {
		pageName = "멤버십 - HeartBeat";
		pageTitle = "멤버십";
	}
	else if (pageRequest.endsWith("mypage.jsp")) {
		pageName = "마이페이지 - HeartBeat";
		pageTitle = "마이페이지";
	}
	
	else if (pageRequest.endsWith("artist/newjeans.jsp")) {
		pageName = "뉴진스";
		pageTitle = "뉴진스";
	}
	
	else if (pageRequest.endsWith("admin/login.jsp")) {
		pageName = "관리자 로그인";
		pageTitle = "관리자 로그인";
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("	<title>");
      out.print(pageName );
      out.write("</title>\r\n");
      out.write("	<meta charset=\"utf-8\">\r\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\">\r\n");
      out.write("	<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("	<meta name=\"title\" content=\"HeartBeat\">\r\n");
      out.write("	<meta name=\"description\" content=\"당신의 심장을 뛰게 하는 음악 사이트, It makes your HeartBeat\">\r\n");
      out.write("	<meta name=\"keywords\" content=\"HeartBeat,음악스트리밍,음악검색,음악듣기,팬커뮤니티,팬소통,팬소통앱,팬커뮤니티소통앱\">\r\n");
      out.write("	<meta name=\"og:title\" content=\"HeartBeat\">\r\n");
      out.write("	<meta name=\"og:url\" content=\"heartbeat.kr/\">\r\n");
      out.write("	<meta name=\"og:site_name\" content=\"HeartBeat\">\r\n");
      out.write("	<meta name=\"og:description\" content=\"당신의 심장을 뛰게 하는 음악 사이트, It makes your HeartBeat\">\r\n");
      out.write("	<meta name=\"og:image\" content=\"#none\">\r\n");
      out.write("	<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/favicon.ico\">\r\n");
      out.write("	<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/reset.css\">\r\n");
      out.write("	<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/font.css\">\r\n");
      out.write("	<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/common.css\">\r\n");
      out.write("	<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/style.css\">\r\n");
      out.write("	<script src=\"https://kit.fontawesome.com/dda279453f.js\"></script>\r\n");
      out.write("	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/vendor/jquery-1.12.4.min.js\"></script>\r\n");
      out.write("	<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/common.js\"></script>\r\n");
      out.write("</head>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"inner service playlist\" data-name=\"playlist\">\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String menuPageRequest = request.getRequestURI();
	
	String chart = menuPageRequest.endsWith("chart.jsp") ? "on" : "";
	String playlist = menuPageRequest.endsWith("playlist.jsp") ? "on" : "";
	String community = menuPageRequest.endsWith("community.jsp") ? "on" : "";
	String membership =	menuPageRequest.endsWith("membership.jsp") ? "on" : "";
	String mypage =	menuPageRequest.endsWith("mypage.jsp") ? "on" : "";
	
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"menu\" class=\"menu\">\r\n");
      out.write("	<div class=\"wrap\">\r\n");
      out.write("		<h1 class=\"logo\"><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/chart\">HeartBeat</a></h1>\r\n");
      out.write("		<div class=\"userCnt\">\r\n");
      out.write("			<div class=\"user\" onclick=\"dropMenuShow();\">\r\n");
      out.write("				<div class=\"image\"><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/profile/user.png\" onerror=this.src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/img/user.png\" alt=\"닉네임\"></div>\r\n");
      out.write("				<div class=\"name\"><p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${UserVO.nickname }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p></div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"dropMenu\">\r\n");
      out.write("			<a href=\"/logout\" class=\"btn-under-02\">로그아웃</a>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"menuCnt\">\r\n");
      out.write("			<ul>\r\n");
      out.write("				<li class=\"item\">\r\n");
      out.write("					<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/chart\" class=\"");
      out.print(chart );
      out.write("\"><i class=\"fa-brands fa-spotify\"></i>차트</a>\r\n");
      out.write("				</li>\r\n");
      out.write("				<li class=\"item\">\r\n");
      out.write("					<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/playlist\" class=\"");
      out.print(playlist );
      out.write("\"><i class=\"fa-solid fa-icons\"></i>플레이리스트</a>\r\n");
      out.write("				</li>\r\n");
      out.write("				<li class=\"item\">\r\n");
      out.write("					<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/community/community?email=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${UserVO.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"");
      out.print(community );
      out.write(' ');
      out.print("artist".equals(request.getAttribute("artistPage")) ? "on" : "" );
      out.write("\"><i class=\"fa-solid fa-comment\"></i>커뮤니티</a>\r\n");
      out.write("				</li>\r\n");
      out.write("				<li class=\"item\">\r\n");
      out.write("					<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/membership\" class=\"");
      out.print(membership );
      out.write("\"><i class=\"fa-solid fa-credit-card\"></i>멤버십</a>\r\n");
      out.write("				</li>\r\n");
      out.write("				<li class=\"item\">\r\n");
      out.write("					<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/notice/notice?num=1\" class=\"");
      out.print(mypage );
      out.write("\"><i class=\"fa-solid fa-user-pen\"></i>공지 및 문의</a>\r\n");
      out.write("				</li>\r\n");
      out.write("				<li class=\"item\">\r\n");
      out.write("					<a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/mypage\" class=\"");
      out.print(mypage );
      out.write("\"><i class=\"fa-solid fa-user-pen\"></i>마이페이지</a>\r\n");
      out.write("				</li>\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>");
      out.write("\r\n");
      out.write("		<div id=\"playBar\" class=\"playBar\">플레이바</div>\r\n");
      out.write("		<div class=\"container\">\r\n");
      out.write("			<div class=\"cntWrap\">\r\n");
      out.write("				<h2 id=\"title\" class=\"title\">");
      out.print(pageTitle );
      out.write("</h2>\r\n");
      out.write("				<div class=\"cntArea\">\r\n");
      out.write("					<div class=\"section-tag\">\r\n");
      out.write("                        <p class=\"noti\">해시태그를 3개 선택해주세요! <br>해시태그를 선택하면 당신에게 맞는 노래를 선곡해드립니다♬</p>\r\n");
      out.write("                        <ul class=\"tagList\">\r\n");
      out.write("                            <li class=\"tag\" data-id=\"100\">#신나는</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"101\">#비오는날</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"102\">#차분한</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"103\">#조용한</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"104\">#파티</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"105\">#운동</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"106\">#명상</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"107\">#휴식</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"108\">#졸릴때</li>\r\n");
      out.write("                            <li class=\"tag\" data-id=\"109\">#노동요</li>\r\n");
      out.write("                        </ul>\r\n");
      out.write("                        <div class=\"btnCnt\">\r\n");
      out.write("                            <button type=\"submit\" class=\"btn-full\" onclick=\"playListShow();\">뮤직리스트 보기</button>\r\n");
      out.write("                            <button type=\"submit\" class=\"btn-border\" onclick=\"playListReset();\">RESET</button>\r\n");
      out.write("                        </div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"section-list\" style=\"display:none\">\r\n");
      out.write("						<div>\r\n");
      out.write("							<div id=\"listTitle\" class=\"listName\"></div>\r\n");
      out.write("							<div class=\"listBx\">\r\n");
      out.write("								<ul class=\"itemWrap\" id=\"musicList\"></ul>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"dimmed\" onclick=\"popAlertCheckHide()\"></div>\r\n");
      out.write("	<script>\r\n");
      out.write("		$(function() {\r\n");
      out.write("			colorRandom();\r\n");
      out.write("			tagSelect();\r\n");
      out.write("			selectAll();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		function playListReset(){\r\n");
      out.write("		    $('#listTitle').empty();\r\n");
      out.write("		    $('#musicList').empty();\r\n");
      out.write("		    $('.section-list').hide();\r\n");
      out.write("		    $('.tagList .tag').removeClass('on');\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function playListShow() {\r\n");
      out.write("			var selectedTags = $('.tagList .tag.on').length;\r\n");
      out.write("            var selectedTagArray = [];\r\n");
      out.write("            var selectedTagIdArray = [];\r\n");
      out.write("\r\n");
      out.write("            $('.tagList .tag.on').each(function() {\r\n");
      out.write("                var tagTxt = $(this).text();\r\n");
      out.write("                var tagId = $(this).data('id');\r\n");
      out.write("                selectedTagArray.push(tagTxt);\r\n");
      out.write("                selectedTagIdArray.push(tagId);\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            console.log(\"******선택된 해시태그 :\", selectedTagArray);\r\n");
      out.write("\r\n");
      out.write("            var wrappedTagArray = selectedTagArray.map(function(tagTxt) {\r\n");
      out.write("                return '<i>' + tagTxt + '</i>';\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            $('#listTitle').empty().append(wrappedTagArray.join(' '));  // 중복 방지 및 새로 갱신\r\n");
      out.write("\r\n");
      out.write("            if (selectedTags < 1) {\r\n");
      out.write("                alert('해시태그를 선택해 주세요! 해시태그는 3개를 선택해주세요.');\r\n");
      out.write("            }\r\n");
      out.write("            else if (selectedTags < 1) {\r\n");
      out.write("                alert('해시태그는 1개를 선택해주세요.');\r\n");
      out.write("            }\r\n");
      out.write("            else {\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type: 'GET',\r\n");
      out.write("                    url: '/music/playlist',\r\n");
      out.write("                    data: {\r\n");
      out.write("                        'hashtag1': selectedTagArray[0], // 첫 번째 해시태그\r\n");
      out.write("                        'hashtag2': selectedTagArray[1], // 두 번째 해시태그\r\n");
      out.write("                        'hashtag3': selectedTagArray[2]  // 세 번째 해시태그\r\n");
      out.write("                    },\r\n");
      out.write("					contentType: 'application/json',\r\n");
      out.write("                    success: function(response) {\r\n");
      out.write("                        //console.log('************Response:', response);\r\n");
      out.write("\r\n");
      out.write("                        var playlist = response.playlist;\r\n");
      out.write("\r\n");
      out.write("                        if (Array.isArray(playlist)) {\r\n");
      out.write("                            // 선택된 해시태그에 해당하는 데이터만 필터링\r\n");
      out.write("                            var filteredResponse = playlist.filter(item =>\r\n");
      out.write("                                selectedTagArray.includes(item.hashtag_name) // selectedTagArray 사용\r\n");
      out.write("                            );\r\n");
      out.write("\r\n");
      out.write("                            var html = '';\r\n");
      out.write("                            filteredResponse.forEach(function(music) {\r\n");
      out.write("                                html += '<li class=\"item\">'\r\n");
      out.write("                                html += '	<div class=\"album\"><i></i></div>'\r\n");
      out.write("                                html += '	<div class=\"arti\">'\r\n");
      out.write("                                html += '		<i class=\"name\">'+music.art_name+'</i>'\r\n");
      out.write("                                html += '		<i class=\"tit\">'+music.music_name+'</i>'\r\n");
      out.write("                                html += '	</div>'\r\n");
      out.write("                                html += '</li>'\r\n");
      out.write("                            });\r\n");
      out.write("\r\n");
      out.write("                            $('#musicList').empty().append(html);\r\n");
      out.write("                            $('.section-list').show();\r\n");
      out.write("                        } else {\r\n");
      out.write("                            console.log(\"응답이 배열이 아닙니다:\", response);\r\n");
      out.write("                        }\r\n");
      out.write("                    },\r\n");
      out.write("                    error: function(xhr, status, error) {\r\n");
      out.write("                        console.log('****** 요청 실패 : ' + status + ' ***** 에러 : ' + error);\r\n");
      out.write("                        console.error(\"Error Details:\", xhr.responseText);\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("            }\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 해시태그 랜덤 컬러 설정\r\n");
      out.write("		function colorRandom() {\r\n");
      out.write("			function getRandomDarkColor() {\r\n");
      out.write("				const letters = '0123456789ABCDEF';\r\n");
      out.write("				let color = '#';\r\n");
      out.write("				let r, g, b;\r\n");
      out.write("\r\n");
      out.write("				// 어두운 색상을 얻기 위해 반복해서 시도\r\n");
      out.write("				do {\r\n");
      out.write("					color = '#';\r\n");
      out.write("					for (let i = 0; i < 6; i++) {\r\n");
      out.write("						color += letters[Math.floor(Math.random() * 16)];\r\n");
      out.write("					}\r\n");
      out.write("					r = parseInt(color.slice(1, 3), 16);\r\n");
      out.write("					g = parseInt(color.slice(3, 5), 16);\r\n");
      out.write("					b = parseInt(color.slice(5, 7), 16);\r\n");
      out.write("				} while ((r > g && r > b) || getLuminance(color) > 0.5);  \r\n");
      out.write("				// 분홍색 계열 제외 및 어두운 색상만 허용\r\n");
      out.write("\r\n");
      out.write("				return color;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			function getLuminance(hex) {\r\n");
      out.write("				const r = parseInt(hex.slice(1, 3), 16) / 255;\r\n");
      out.write("				const g = parseInt(hex.slice(3, 5), 16) / 255;\r\n");
      out.write("				const b = parseInt(hex.slice(5, 7), 16) / 255;\r\n");
      out.write("\r\n");
      out.write("				const a = [r, g, b].map(function (v) {\r\n");
      out.write("					return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\r\n");
      out.write("				});\r\n");
      out.write("\r\n");
      out.write("				const luminance = a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\r\n");
      out.write("\r\n");
      out.write("				return luminance;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			function setRandomColors() {\r\n");
      out.write("				$('.tag').each(function() {\r\n");
      out.write("					const color = getRandomDarkColor(); // 어두운 랜덤 색상 얻기\r\n");
      out.write("					$(this).css('background-color', color);\r\n");
      out.write("\r\n");
      out.write("					const luminance = getLuminance(color);\r\n");
      out.write("					const textColor = luminance > 0.5 ? '#000000' : '#FFFFFF';\r\n");
      out.write("					$(this).css('color', textColor);\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			setRandomColors();\r\n");
      out.write("\r\n");
      out.write("			$('#tagReset').on('click', function() {\r\n");
      out.write("				setRandomColors();\r\n");
      out.write("				$('.tagList .tag').removeClass('on');\r\n");
      out.write("				$('#listTitle').empty();  // 선택된 태그 초기화\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 해시태그 3개까지 선택 가능하도록 제한\r\n");
      out.write("		function tagSelect() {\r\n");
      out.write("			var maxSelection = 3;\r\n");
      out.write("\r\n");
      out.write("			$('.tagList .tag').on('click', function() {\r\n");
      out.write("				if ($(this).hasClass('on')) {\r\n");
      out.write("					$(this).removeClass('on');\r\n");
      out.write("				} else {\r\n");
      out.write("					if ($('.tagList .on').length < maxSelection) {\r\n");
      out.write("						$(this).addClass('on');\r\n");
      out.write("					} else {\r\n");
      out.write("						alert('해시태그는 최대 3개까지만 선택할 수 있습니다.');\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function selectAll() {\r\n");
      out.write("			$('#allBtn').on('click', function () {\r\n");
      out.write("				$('.check').prop('checked', $(this).prop('checked'));\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
