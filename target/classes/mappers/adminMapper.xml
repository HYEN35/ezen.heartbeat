<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
	<mapper namespace="kr.heartbeat.mappers.admin">
  
		<!-- summary -->
	  	<select id="count_a" resultType="int">
		    SELECT COUNT(email)
		    FROM user_tbl
		    WHERE DATE(reg_date) = CURDATE();
		</select>
		
		<select id="count_b" resultType="int">
		    SELECT COUNT(s.email)
			FROM subscription_tbl s
			JOIN user_role_tbl u ON s.email = u.email
			WHERE u.role_id IN (2);
		</select>
	
		<select id="count_c" resultType="map">
		    SELECT a.art_name AS artist_name, COUNT(u.email) AS email_count
		    FROM user_tbl u
		    JOIN user_role_tbl r ON u.email = r.email
		    JOIN artist_tbl a ON u.artist_id = a.artist_id
		    WHERE r.role_id = 2 AND u.artist_id IS NOT NULL
		    GROUP BY u.artist_id
		    ORDER BY email_count DESC
		    LIMIT 1;
		</select>
		
	    <!-- 전체 유저 수 조회 -->
	    <select id="levelTotalCnt" resultType="int">
	        SELECT COUNT(*) AS total FROM user_tbl;
	    </select>
	    
	    <!-- 특정 레벨의 유저 수 조회 -->
	    <select id="levelCnt"  parameterType="int" resultType="int">
	        SELECT COUNT(*) AS count
		    FROM user_tbl u
		    INNER JOIN user_role_tbl r ON u.email = r.email
		    WHERE r.role_id = 2 AND u.level = #{level};
	    </select>

		<!-- member -->
		<select id="user_list" parameterType="hashMap" resultType="kr.heartbeat.vo.UserVO">
			SELECT * FROM user_tbl u
			INNER JOIN user_role_tbl r ON u.email = r.email
			<where>
			    <if test='searchType.equals("name")'>
			        u.name LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			    
			    <if test='searchType.equals("email")'>
			        u.email LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			    
			    <if test='searchType.equals("nickname")'>
			        u.nickname LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			    
			    <if test='searchType.equals("phone")'>
			        u.phone LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			
			    <!-- Role ID 조건 -->
			    <if test='roleId != null'>
			        AND r.role_id IN (${roleId})
			    </if>
			</where>
			ORDER BY u.email DESC
			LIMIT #{displayPost}, #{postNum}
		</select>
			
		<select id="getUserCount" parameterType="hashMap" resultType="int">
			SELECT COUNT(*) FROM user_tbl u
			INNER JOIN user_role_tbl r ON u.email = r.email
			<where>
			    <if test='searchType.equals("name")'>
			        u.name LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			    
			    <if test='searchType.equals("email")'>
			        u.email LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			    
			    <if test='searchType.equals("nickname")'>
			        u.nickname LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			    
			    <if test='searchType.equals("phone")'>
			        u.phone LIKE CONCAT('%', #{keyword}, '%')
			    </if>
			
			    <!-- Role ID 조건 -->
			    <if test='roleId != null'>
			        AND r.role_id IN (${roleId})
			    </if>
			</where>
		</select>
		
		<delete id="memberdelete" parameterType="String">
		    delete from user_tbl
		    where email = #{email}
		</delete>
		
		<!-- post -->
		<select id="post_list" parameterType="hashMap" resultType="kr.heartbeat.vo.PostVO">
		select * from post_tbl
		
		<if test='searchType.equals("post_id")'>
			where post_id like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("nickname")'>
			where nickname like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("post_date")'>
			where post_date like concat('%', #{keyword}, '%')
		</if>
		
		<if test='searchType.equals("content")'>
			where content like concat('%', #{keyword}, '%')
		</if>
		
		order by post_id desc
		limit #{displayPost}, #{postNum}
		</select>
		
		<select id="getPostCount" parameterType="hashMap" resultType="int">
		select count(*) from post_tbl

			<if test='searchType.equals("post_id")'>
				where post_id like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("nickname")'>
				where nickname like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("post_date")'>
			where post_date like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("content")'>
				where content like concat('%', #{keyword}, '%')
			</if>
	
		</select>
		
		<delete id="podelete" parameterType="int">
			delete from post_tbl
			where post_id = #{post_id}
		</delete>
		
		<!-- comment -->
		<select id="comment_list" parameterType="hashMap" resultType="kr.heartbeat.vo.CommentVO">
		select * from comment_tbl

			<if test='searchType.equals("comment_id")'>
				where comment_id like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("nickname")'>
				where nickname like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("comment_date")'>
				where comment_date like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("content")'>
				where content like concat('%', #{keyword}, '%')
			</if>
				
			order by comment_id desc
			limit #{displayPost}, #{postNum}

		</select>
		
		<select id="getCommentCount" parameterType="hashMap" resultType="int">
		select count(*) from comment_tbl

			<if test='searchType.equals("comment_id")'>
				where comment_id like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("nickname")'>
				where nickname like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("comment_date")'>
			where comment_date like concat('%', #{keyword}, '%')
			</if>
			
			<if test='searchType.equals("content")'>
				where content like concat('%', #{keyword}, '%')
			</if>
			
		</select>
		
		<delete id="codelete" parameterType="int">
			delete from comment_tbl 
			where comment_id = #{comment_id}
		</delete>
		
		<!-- edit  -->
		<select id="edit" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
			select * from user_tbl
			where email = #{email}
		</select>
	
		<update id="update" parameterType="kr.heartbeat.vo.UserVO">
			update user_tbl set
				name = #{name}
				, email = #{email}
				, nickname = #{nickname}
				, birth = #{birth}
				, phone = #{phone}
				, level = #{level}
				, up_date = now()
			where email = #{email}
		</update>
		
	<!-- 중복 확인  -->
	<select id="emailcheck" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where email = #{email}
	</select>
	
	<select id="phonecheck" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where phone = #{phone}
	</select>

	<select id="nicknamecheck" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where nickname = #{nickname}
	</select>
	
	<!-- 계정생성 -->
	<select id="getRole" resultType="kr.heartbeat.vo.RoleVO">
	    SELECT role_id, role_name 
	    FROM role_tbl;
	</select>
	
	<!-- 1. 유저 기본 정보 삽입 -->
    <insert id="insertUser" parameterType="kr.heartbeat.vo.UserVO">
	    INSERT INTO user_tbl (
	        email,
	        artist_id,
	        pwd,
	        name,
	        nickname,
	        birth,
	        phone,
	        profileimg,
	        level,
	        reg_date,
	        up_date
	    ) VALUES (
	        #{email},
	        #{artist_id},
	        #{pwd},
	        #{name},
	        #{nickname},
	        #{birth},
	        #{phone},
	        null,
	        #{level},
	        NOW(),
	        NOW()
	    )
	</insert>

    <!-- 2. 유저 역할 삽입 -->
    <insert id="insertUserRole" parameterType="kr.heartbeat.vo.UserroleVO">
	    INSERT INTO user_role_tbl (
	        email,
	        role_id
	    ) VALUES (
	        #{email},
	        #{role_id}
	    )
	</insert>

    <!-- 3. 구독 정보 삽입 -->
    <insert id="insertSubscription" parameterType="kr.heartbeat.vo.SubscriptionVO">
	    INSERT INTO subscription_tbl (
	        email,
	        level,
	        artist_id,
	        start_date,
	        end_date
	    ) VALUES (
	        #{email},
	        #{level},
	        #{artist_id},
	        #{start_date},
	        #{end_date}
	    )
	</insert>
	
	</mapper>