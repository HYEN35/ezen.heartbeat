<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.heartbeat.mappers.user">
	<!-- 중복 확인  -->
	<select id="emailcheck" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where email = #{email}
	</select>
	
	<select id="phonecheck" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where phone = #{phone}
	</select>

	<select id="nicknamecheck" parameterType="String" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where nickname = #{nickname}
	</select>
	
	
	
	<!-- 회원가입 -->
	<insert id="join" parameterType="kr.heartbeat.vo.UserVO">
	    insert into user_tbl (
	        email,
	        artist_id,
	        pwd,
	        name,
	        nickname, 
	        birth, 
	        phone, 
	        profileimg, 
	        reg_date, 
	        up_date
	    ) values (
	        #{email}, 0, #{pwd}, #{name}, #{nickname}, #{birth}, #{phone}, #{profileimg}, now(), now())
	</insert>
	
	<!-- 회원가입 시 유저 역할 추가 -->
	<insert id="joinUserRole" parameterType="String">
		insert into user_role_tbl (
		email,
		role_id
		) values (
		#{email}, 2)
	</insert>
	
	<!-- 로그인 -->
	<select id="login" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where email = #{email}
	</select>
	<!-- 역할 아이디 확인 -->
	<select id="role" parameterType="kr.heartbeat.vo.UserroleVO" resultType="kr.heartbeat.vo.UserroleVO">
		select * from user_role_tbl where email = #{email}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findId" parameterType="kr.heartbeat.vo.UserVO" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where name = #{name} 
		and DATE_FORMAT(birth, '%Y%m%d') = #{birth} <!-- db에 저장된 YYYY-MM-DD 형식을 입력받은 YYYYMMDD 형식으로 바꿔서 비교한다. -->
    	and phone = #{phone}
	</select>
	
	<!-- 비밀번호 찾기 - 메일 전송 버전 -->
	<select id="searchPwd" parameterType="hashMap" resultType="kr.heartbeat.vo.UserVO">
		select * from user_tbl
		where email = #{email} 
    	and name = #{name}
		and DATE_FORMAT(birth, '%Y%m%d') = #{birth} 
	</select>

	<!-- 새 비밀번호  -->
	<update id="updatePwd" parameterType="hashMap" >
		update user_tbl set
			pwd = #{newPassword}
		where email = #{email}
	</update>
	
	<!-- 회원 정보 수정 -->
	<update id="modify" parameterType="hashMap">
		update user_tbl set
        pwd = #{userVO.pwd},
        nickname = #{userVO.nickname},
        profileimg = #{userVO.profileimg},
        up_date = now()
    	where email = #{userVO.email}
	</update>
	
	

	<!-- 1.사용자 조회 -->
	<select id="userSearch" parameterType="kr.heartbeat.vo.UserVO" resultType="int">
		select count(*) from user_tbl
		where email = #{email} and pwd = #{pwd}
	</select>
	<!--2. 회원정보를 삭제유저테이블에 저장-->
	<insert id="delUserInsert" parameterType="kr.heartbeat.vo.UserVO">
	    insert into delete_user_tbl (
	        del_email,
	        del_artist_id,
	        del_pwd,
	        del_name,
	        del_nickname, 
	        del_birth, 
	        del_phone, 
	        del_profileimg, 
	        del_level, 
	        del_reg_date,
	        del_date
	    ) values (
	        #{email}, #{artist_id}, #{pwd}, #{name}, #{nickname}, #{birth}, #{phone}, #{profileimg}, #{level},#{reg_date}, now())
	</insert>
	<!-- 3. 회원 삭제 -->
	<delete id="delete" parameterType="kr.heartbeat.vo.UserVO">
		delete from user_tbl
		where email = #{email}
	</delete>
	
	<!-- 내 게시물 개수 가져오기 -->
	<select id="getMyPostCount" parameterType="hashmap" resultType="int">
		select count(*) from post_tbl
		    <where>
		        <if test="searchType != null and searchType.equals('title')">
		            title like concat('%',#{keyword},'%')
		        </if>
		        
		        <if test="searchType != null and searchType.equals('content')">
		            content like concat('%',#{keyword},'%')
		        </if>
		        
		        <if test="searchType != null and searchType.equals('nickname')">
		            nickname like concat('%',#{keyword},'%')
		        </if>
		
		        and email = #{email}
		    </where>
	</select>
	<!-- 내 맴버십 날짜 확인 -->
	<select id="checkMyMembershipDate" parameterType="String" resultType="kr.heartbeat.vo.SubscriptionVO">
		select * from subscription_tbl where email = #{email}
	</select>
	
	<!-- 내 게시물 가져오기 -->
	<select id="getUserPost" parameterType="hashmap" resultType="kr.heartbeat.vo.PostVO">
	    select * from post_tbl
	    <where>
	        <if test="searchType != null and searchType.equals('content')">
	            content like concat('%', #{keyword}, '%')
	        </if>
	
	        <if test="searchType != null and searchType.equals('nickname')">
				nickname like concat('%',#{keyword},'%')
			</if>
	
	        <!-- email 조건이 항상 적용되도록 넣기 -->
	        and email = #{email}
	    </where>
	    order by post_id desc
	    limit #{displayPost}, #{postNum}
	</select>
	<!-- 유저 개인 게시물 삭제하기 -->
	<delete id="deleteMyPost" parameterType="int">
		delete from post_tbl where post_id = #{post_id}
	</delete>
	
	<!-- 내 문의 개수 가져오기 -->
	<select id="getMyNoticeCount" parameterType="hashmap" resultType="int">
		select count(*) from notice_tbl
		    <where>
		        <if test="searchType != null and searchType.equals('title')">
		            title like concat('%',#{keyword},'%')
		        </if>
		        
		        <if test="searchType != null and searchType.equals('content')">
		            content like concat('%',#{keyword},'%')
		        </if>
		        
		        <if test="searchType != null and searchType.equals('nickname')">
		            nickname like concat('%',#{keyword},'%')
		        </if>
		
		        and email = #{email}
		    </where>
	</select>
	<!-- 내 문의 가져오기 -->
	<select id="getUserNotice" parameterType="hashmap" resultType="kr.heartbeat.vo.NoticeVO">
	    select * from notice_tbl
	    <where>
	    	<if test="searchType != null and searchType.equals('title')">
	            title like concat('%',#{keyword},'%')
	        </if>
	        
	        <if test="searchType != null and searchType.equals('content')">
	            content like concat('%', #{keyword}, '%')
	        </if>
	
	        <if test="searchType != null and searchType.equals('nickname')">
				nickname like concat('%',#{keyword},'%')
			</if>
	
	        <!-- email 조건이 항상 적용되도록 넣기 -->
	        and email = #{email}
	    </where>
	    order by notice_id desc
	    limit #{displayPost}, #{postNum}
	</select>
	<!-- 유저 개인 게시물 삭제하기 -->
	<delete id="deleteMyNotice" parameterType="int">
		delete from notice_tbl where notice_id = #{notice_id}
	</delete>

</mapper>