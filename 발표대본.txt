발표 - 관리자 페이지


45 - 로그인 창에서 직원 계정으로 로그인하면 관리자 페이지로 연결됩니다.
user_role_tbl의 role_id 값을 통해 직원, 아티스트, 유저를 구분하며, role_id가 0인 직원 계정만 관리자 페이지에 접근할 수 있습니다.

관리자 페이지 메뉴는 다음과 같이 구성됩니다:

Summary (대시보드): 주요 데이터(회원 수, 게시물 수, 댓글 수 등)를 실시간으로 시각화.
회원 리스트: 유저와 직원을 각각 리스트로 확인하며, 유저 리스트에서는 필터 기능을 사용해 검색 가능.
게시글 확인: 게시글 리스트 확인 및 팝업으로 상세 보기 가능.
댓글 확인: 댓글 리스트 확인 및 팝업으로 상세 보기 가능.
공지 및 문의: 공지 작성/수정/삭제, 문의 답변 작성 가능.
관리자는 유저 페이지에서도 관리자 페이지로 이동할 수 있습니다. 해당 버튼은 직원 계정에서만 보입니다.

[대시보드 기능]
46 - 대시보드에는 다음과 같은 데이터를 제공합니다:

오늘 가입/탈퇴한 유저 수, 총 회원 수, 가장 많은 구독자를 보유한 아티스트 및 구독자 수.
회원 등급 분석, 연령대별 회원 현황 분석, 매출 분석을 그래프로 시각화.

47 - 매출분석, 인기 게시물
호원 등급에서 구현한 코드를 재활용하여 매출분석 자료를 출력.
좋아요 수가 많은 게시물 리스트를 하단에 제공하며, 팝업으로 바로 열람 가능.

[계정 생성 페이지]
48 - 관리자 전용 페이지로, 특수한 상황에서 아티스트 계정 등을 생성할 수 있습니다.

특징:
구독권, 기간, 역할 등 모든 권한을 설정할 수 있도록 설계.
회원가입과 달리 유효성 검증을 완화하고 중복 확인을 통해 중복 데이터 저장 방지.
필수 입력값이 누락되면 경고 메시지로 입력을 유도.

기술적 어려움:
세 개의 테이블(user_tbl, user_role_tbl, subscription_tbl)에 데이터를 삽입해야 했습니다.
구독권이 없는 경우 subscription_tbl 삽입을 생략하도록 처리했습니다.

49 - 계정생성 코드해석

[회원 리스트]
50 - 유저와 직원을 구분하여 각각 리스트로 관리합니다.

유저 리스트:
아티스트와 일반 유저만 출력.
검색 필터를 통해 특정 조건으로 검색 가능.

직원 리스트:
직원 계정만 출력.
정보 수정 및 삭제:

51 - 회원정보 수정

회원 상세 정보 페이지에서 일부 정보 수정 가능(email, password, date는 수정 불가 : readonly).
연관 데이터(level)는 DB Cascade 설정으로 관리.

[게시글 및 댓글 관리]
52 - 게시글과 댓글 관리는 유사한 구조로 구성되었습니다.

검색 기능:
유저 또는 아티스트 게시물만 필터링 가능.
수정 및 삭제 정책:
게시글/댓글 수정 기능은 제공하지 않고 삭제만 가능.
팝업 상세 보기를 통해 전후 상황을 확인한 뒤 삭제를 결정할 수 있도록 설계.

[공지 및 문의]
53 - 관리자 페이지에서 공지 및 문의를 처리할 수 있도록 구성했습니다.

공지 관리:
작성한 공지는 빨간색으로 상단에 고정.
수정 및 삭제 가능.
문의 답변:
유저 페이지로 이동하지 않고 바로 관리자 페이지에서 처리 가능.

[향후 개선 및 업데이트 계획]
56 - 기능 개선과 새로운 기능 제안을 다음과 같이 분류했습니다:

Update (빠른 개선 필요)
공지 댓글 수정/삭제 기능 추가.
게시물 팝업 오류 수정(유저와 아티스트 게시물 구분).
신고 기능 및 알림 기능 추가.

New (추가 제안)
구글 차트 API: 실시간 데이터 시각화를 위한 대시보드 업그레이드.
CKEditor 도입: 관리자 및 유저 페이지에 글쓰기 툴 제공.
메시지 기능: 직원 간 소통을 위한 메시지 기능 추가 검토.


====================================================================================================================

                [관리자 페이지]

45- 관리자 페이지와 DB를 맡은 윤보현입니다.
관리자 페이지을 구현할 때 핵심은 데드라인을 지키는 것 이였습니다. 관리자 페이지는 가장 마지막에 개발에 들어갔기 때문에 시간이 촉박해서 다른 페이지들과 오류 없이 조합되기 위해서 코드 재활용률을 늘리고 재활용된 코드들 충돌하지 않는데 집중했으며 새롭게 만든 코드 역시 다시 재활용하여 만드는 등의 노력을 기하였습니다.

로그인창에서 직원계정으로 로그인을 하면 관리자페이지로 연결됩니다. user_role_tbl. role_id로 직원, 아티스트, 유저를 구분하고 있기 때문에 role_id가 0인 직원일 경우만 관리자 페이지로 연결됩니다.

또한 관리자가 유저페이지에서 업무를 보는 경우도 고려하여 유저페이지에서는 관리자페이로 연결되는 버튼을 만들었습니다.
직원 계정으로 유저페이지로 갔을 경우만 나오는 버튼입니다.

46- 관리자로 로그인하게 되면 나오는 메인 페이지의 상단부분 입니다. 대시보드에서 다양한 데이터를 보여주고 있어 서비스 운영의 진행상황 등을 전반적으로 점검할 수 있습니다.

47- 하단에 도출되는 정보는 매출분석과 인기 게시물이 나오며 게시물 클릭 팝업으로 도출됩니다. 매출 분석은 상단에 있는 회원 등급 분석을 활용하여 구현했습니다.

48- 계정생성 페이지 입니다. 관리자가 아티스트의 계정을 생성하는 등 특수한 상황에서 계정을 생성해야 할 경우 해당 페이지에 들어와 계정을 생성할 수 있습니다. 다만 회원가입과의 다른점은 모든 권한(구독권, 기간, 역할)을 설정할 수 있기 때문에 초반에 로직을 구성하는데 어려움이 있었습니다.
이 페이지의 경우 세가지 테이블에 모두 insert 해줘야 하고 만약 구독권이 없는 계정을 생성할 경우는 subscription_tbl을 제외한 두가지 테이블에 데이터를 저장해야 합니다.

또한 유효성 검증을 거쳐서 계정이 생성되도록 해야 하지만 아티스트 아이디에 경우 이메일 형식을 따르지 않고 활동명의 영문표기를 따라 계정을 생성하도록 정책을 채택했기 때문에 회원가입의 유효성 검증을 가져와 적용할 수 없었습니다. 그렇기 때문에 완화된 유효성 검증을 거치고 중복확인을 거치지 않으면 계정생성 버튼이 비활성화 되어 중복된 값이 DB에 없도록 하였으며 필수 입력값이 없다면 메세지를 통해서 다시 작성하도록 유도했습니다. 
 
49- 
1. [Controller]
   - 관리자가 입력한 데이터를 수신 (`adminInsertUser`)
   - 비밀번호 암호화 처리
   - 구독 정보가 있는지 확인 후 SubscriptionVO 생성
   - Service의 `insertUser` 호출

2. [Service]
   - `insertUser`: 
     - User 정보를 `user_tbl`에 저장
     - User Role 정보를 `user_role_tbl`에 저장
     - 구독 정보가 있으면 `subscription_tbl`에 저장
   - 트랜잭션 관리 적용

3. [Persistence (Mapper)]
   - `user_tbl`, `user_role_tbl`, `subscription_tbl`에 각각 Insert SQL 실행

50- 회원리스트 페이지 회원과 직원 모두 리스트로 확인할 수 있도록 각각 구성했으며 회원 리스트는 아티스트와 유저만 출력되며 직원의 경우 직원만 출력됩니다. 회원 리스트의 경우 검색필터를 사용하여 아티스트만 또는 유저만 리스트에 출력되도록 하여 편의성을 증가시켰고 삭제버튼을 누르면 바로 삭제가 됩니다. 보기를 누르고 회원의 상세 정보로 들어오게 되면 회원의 정보를 수정해줄 수 있습니다. 

51- 아이디로 사용되는 email과 보안을 위해서 password, date 값을 수정할 수 없도록 read only를 적용하였습니다. 정보 수정은 user_tbl(userVO) 범위 안에서만 수정가능하도록 하였으며 level과 같은 다른 테이블과 연관이 있는 값은 DB에서 해당 테이블에 update를 CASCADE 로 설정하여 해결했습니다.

52- 게시글 확인 페이지의 경우 전체적은 구성은 회원리스트와 유사합니다.
이 페이지 역시 검색필터가 존재하여 유저 또는 아티스트가 올린 게시물만 걸러서 볼 수 있고 검색기능을 통해서 원하는 값을 도출할 수 있습니다. 게시글의 경우 관리자가 유저나 아티스트가 작성한 글을 수정한다는 것이 문제소지가 있어 해당 페이지는 수정 기능을 제공하지 않습니다. 삭제만 가능하며 보기를 클릭하면 유저 페이지와 동일하게 팝업으로 게시글 창을 열어줍니다. 그렇기 때문에 관리자가 어떤 글 하나만을 보고 삭제를 결정하는 것이 아닌 전후 상황을 모두 보고 판단할 수 있도록 기술지원을 하였습니다.
댓글확인 역시 구성과 정책이 모두 동일합니다.

53- 공지 및 문의 페이지입니다. 기본적으로 유저페이지에 있는 공지 및 문의 페이지와 동일합니다. 관리자가 작성한 게시글이 빨간색으로 상단에 탑재되도록하였고 내가 작성한 글을 확인할 수 있습니다. 수정과 삭제를 모두 제공하고 있습니다. 관리자 페이지에서 해당 페이지를 제공하기 때문에 번거롭게 유저 페이지로 이동해서 업무처리할 필요없이 관리자페이지에서 모든 업무를 처리할 수 있도록 하였습니다.

56- 마지막으로 아쉬웠던 부분이나 앞으로 우리 서비스가 나아질 수 있는 부분에 대해서 설명하겠습니다.

빠른 시일내에 수정이 가능하거나 서비스 질 향상을 위해서 당장 필요한 기능을 update로, 구현에 시간이 필요하거나 추가적으로 제안된 기능을 new로 분류하였습니다.

[ - update - ]
1. 공지사항 댓글 수정/삭제 
    •현재 유저가 작성한 댓글 관리자가 수정/삭제 불가 상태.
    •빠른 시일 내 수정 예정.
2. 팝업 구분
    •게시물 및 댓글 확인 시 팝업 형태로 출력 기능 구현.
    •모든 게시물이 아티스트 팝업 형태로 출력되는 문제 발생.
    •유저와 아티스트 게시물 팝업을 구분하도록 수정 필요.
3. 신고 및 알림 기능
    •신고하기 버튼 추가: 부적절한 게시물/댓글 신고 가능.
    •관리자 페이지에서 신고 접수 및 처리 기능 구현 예정.
    •새로운 문의 발생 시 관리자에게 알림 제공.

[ - new - ]
1. 구글 차트 API 도입
    •대시보드에 구글 차트 API 적용.
    •회원 수, 구독자 수 등 실시간 데이터 시각화.
2. CKEditor 도입
    •관리자 페이지 및 서비스 전반에 글쓰기 툴 제공.
    •업무 효율성 증대 및 유저 개성 표현 도구로 활용.
3. 메시지 기능 (추가 제안)
    •직원 간 소통을 위한 메시지 기능 추가 제안.
    •문서 공유 및 그룹웨어 확장 가능성 검토.
    •안정화 후 유저 페이지로 확대 적용 가능.

